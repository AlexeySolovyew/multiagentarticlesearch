package searcher.agents.udbagent;

import jade.core.AID;
import jade.core.Agent;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXException;

import searcher.Article;

public class UserDataBaseAgent extends Agent {

	private AID userAgentAID;
	private AID orchestratorAgentAID;
	private File farticles;
	private File fauthors;

	public static final String INIT_USER = "INIT_USER";

	protected void setup() {
		super.setup();
		System.out.println("DataBaseAgent: Вот щас бы файлики создать");
		farticles = initFile("articles.xml", "ARTICLES");
		fauthors = initFile("authors.xml", "AUTHORS");
		addBehaviour(new UserDataBaseAgentCyclicBehaviour(this));
	}

	public void setUserAID(AID aid) {
		userAgentAID = aid;
	}

	public AID getUserAgentAID() {
		return userAgentAID;
	}

	public AID getOrchestratorAID() {
		return orchestratorAgentAID;

	}

	public void setOrchestratorAID(AID aid) {
		orchestratorAgentAID = aid;

	}

	public File initFile(String s, String type) {

		File f = new File(s);
		if (!f.exists()) {
			try {
				f.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println("DataBaseAgent: New file " + s
					+ " has been created to the current directory");

			System.out.println("DataBaseAgent: такой файл уже есть: "
					+ f.getAbsolutePath());
			try {
				// Create filewriter
				FileWriter fstream = new FileWriter(f);
				BufferedWriter out = new BufferedWriter(fstream);

				out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

				out.newLine();
				out.write("<" + type + ">");
				out.newLine();
				out.write("</" + type + ">");

				// Close the output stream
				out.close();
			} catch (Exception e) {// Catch exception if any
				System.err.println("Error: " + e.getMessage());
			}
		}

		return f;
	}

	public void addRatings(Article a) throws DOMException, IOException {

		Document document = null;
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		// просто статьи по айдишникам
		try {
			builder = factory.newDocumentBuilder();
			document = builder.parse(farticles);
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Element root = document.getDocumentElement();
		NodeList nl = root.getElementsByTagName("ID");
		if (nl.getLength() == 0) {
			System.out
					.println("UserDataBase: adding new article to stats, there are no articles in the file yet");
			root.appendChild(createNode(document, "ARTICLE", "ID", a.getURL()));

		} else {
			int i = 0;
			for (; i < nl.getLength(); i++) {
				if (nl.item(i).getTextContent().equals(a.getURL())) {
					System.out
							.println("UserDataBase: this article already exists");
					Node rankNode = nl.item(i).getParentNode().getChildNodes()
							.item(1);
					System.out
							.println("UserDataBase: adding rank to existing article");
					rankNode.setTextContent(((new Integer(rankNode
							.getTextContent())).intValue() + 10) + "");
					break;
				}
			}
			if (i == nl.getLength()) {
				System.out
						.println("UserDataBase: this article doesn't exist, adding new node");
				root.appendChild(createNode(document, "ARTICLE", "ID",
						a.getURL()));
			}
		}

		StreamResult result;
		try {
			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			Transformer transformer = tFactory.newTransformer();

			DOMSource source = new DOMSource(document);
			result = new StreamResult(farticles);
			transformer.transform(source, result);
		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("* Transformer Factory error");
			System.out.println("  " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;
			if (tce.getException() != null)
				x = tce.getException();
			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("* Transformation error");
			System.out.println("  " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;
			if (te.getException() != null)
				x = te.getException();
			x.printStackTrace();
		}

		// а тут авторы

		try {
			builder = factory.newDocumentBuilder();
			document = builder.parse(fauthors);
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		root = document.getDocumentElement();
		nl = root.getElementsByTagName("NAME");
		if (!a.getAuthor().equals("no author")) {
			if (nl.getLength() == 0) {
				System.out
						.println("UserDataBase: adding new author to stats, there are no authors in the file yet");
				root.appendChild(createNode(document, "AUTHOR", "NAME",
						a.getAuthor()));

			} else {
				int i = 0;
				for (; i < nl.getLength(); i++) {
					if (nl.item(i).getTextContent().equals(a.getAuthor())) {
						System.out
								.println("UserDataBase: this author already exists");
						Node rankNode = nl.item(i).getParentNode()
								.getChildNodes().item(1);
						System.out
								.println("UserDataBase: adding rank to existing author");
						rankNode.setTextContent(((new Integer(rankNode
								.getTextContent())).intValue() + 10) + "");

						break;
					}
				}
				if (i == nl.getLength()) {
					System.out
							.println("UserDataBase: this author doesn't exist, adding new node");
					root.appendChild(createNode(document, "AUTHOR", "NAME",
							a.getAuthor()));
				}
			}
		}

		try {
			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			Transformer transformer = tFactory.newTransformer();

			DOMSource source = new DOMSource(document);
			result = new StreamResult(fauthors);
			transformer.transform(source, result);
		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("* Transformer Factory error");
			System.out.println("  " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;
			if (tce.getException() != null)
				x = tce.getException();
			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("* Transformation error");
			System.out.println("  " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;
			if (te.getException() != null)
				x = te.getException();
			x.printStackTrace();
		}

	}

	public Article updateRank(Article a) {
		Document document = null;
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		try {
			builder = factory.newDocumentBuilder();
			document = builder.parse(farticles);
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Element root = document.getDocumentElement();
		NodeList nl = root.getElementsByTagName("ID");
		if (nl.getLength() == 0) {
			System.out
					.println("UserDataBase: sorry, my friend, no articles in my database yet");
			return a;

		} else {
			int i = 0;
			for (; i < nl.getLength(); i++) {
				if (nl.item(i).getTextContent().equals(a.getURL())) {

					Node rankNode = nl.item(i).getParentNode().getChildNodes()
							.item(1);
					System.out
							.println("UserDataBase: found it's rank, sending you updated article");
					a.addUserRank((new Integer(rankNode.getTextContent()))
							.intValue());
					break;
				}
			}
			if (i == nl.getLength()) {
				System.out
						.println("UserDataBase: sorry, my friend, this article doesn't exist");
			}
		}

		try {
			builder = factory.newDocumentBuilder();
			document = builder.parse(fauthors);
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		root = document.getDocumentElement();
		nl = root.getElementsByTagName("NAME");
		if (nl.getLength() == 0) {
			System.out
					.println("UserDataBase: sorry, my friend, no authors in my database yet");
			return a;

		} else {
			int i = 0;
			for (; i < nl.getLength(); i++) {
				if (nl.item(i).getTextContent().equals(a.getAuthor())) {
					System.out
							.println("UserDataBase: found author's rank, updating atricle");
					Node rankNode = nl.item(i).getParentNode().getChildNodes()
							.item(1);
					a.addUserRank((new Integer(rankNode.getTextContent()))
							.intValue());
					return a;
				}
			}
			if (i == nl.getLength()) {
				System.out
						.println("UserDataBase: sorry, my friend, author of this article doesn't exist");
				return a;
			}
		}

		return null;

	}

	private Element createNode(Document document, String s1, String s2,
			String content) {
		Element art = document.createElement(s1);
		Element elem;
		Text elem_value;

		elem = document.createElement(s2);
		elem_value = document.createTextNode(content);
		elem.appendChild(elem_value);
		art.appendChild(elem);

		elem = document.createElement("RATE");
		elem_value = document.createTextNode("10");
		elem.appendChild(elem_value);
		art.appendChild(elem);

		return art;

	}
}
